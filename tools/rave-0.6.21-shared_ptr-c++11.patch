From 01af7b8bdd6a39a19ab4a08eeed35ce3e7b3c1de Mon Sep 17 00:00:00 2001
From: Genie Jhang <geniejhang@majimak.com>
Date: Thu, 16 Apr 2015 12:24:39 +0900
Subject: [PATCH] - shared_ptr in boost is changed into shared_ptr in C++11

---
 .../TaggedTransientTrackKinematicParticle.h        |  9 +++++----
 .../RaveEngine/src/RaveParameterSetBuilder.cc      | 17 +++++++++--------
 .../src/TaggedTransientTrackKinematicParticle.cc   |  2 +-
 .../RaveInterface/rave/BasicKinematicParticle.h    | 11 ++++++-----
 .../RaveInterface/rave/KinematicParticle.h         |  4 ++--
 .../RaveInterface/src/BasicKinematicConstraint.cc  |  7 ++++---
 .../RaveInterface/src/BasicKinematicParticle.cc    |  4 ++--
 .../src/BasicMultipleKinematicConstraint.cc        | 16 ++++++++--------
 .../src/BasicTransientTrackKinematicParticle.cc    |  4 ++--
 .../src/KinematicConstraintBuilder.cc              | 22 +++++++++++-----------
 .../RaveInterface/src/KinematicParticle.cc         |  4 ++--
 .../RaveInterface/src/KinematicTreeFactory.cc      |  4 ++--
 .../src/VertexGaussianStateConversions.cc          |  5 +++--
 .../interface/AnalyticalPropagatorESProducer.h     |  7 ++++---
 .../GsfTools/interface/CloseComponentsMerger.h     |  5 +++--
 .../GsfTools/interface/GaussianStateLessWeight.h   |  5 +++--
 .../GsfTools/interface/MultiGaussianState.h        |  7 ++++---
 .../interface/LocalTrajectoryError.h               |  7 ++++---
 18 files changed, 75 insertions(+), 65 deletions(-)

diff --git a/src/RaveBase/RaveEngine/interface/TaggedTransientTrackKinematicParticle.h b/src/RaveBase/RaveEngine/interface/TaggedTransientTrackKinematicParticle.h
index 320ab0f..1ee391f 100644
--- a/src/RaveBase/RaveEngine/interface/TaggedTransientTrackKinematicParticle.h
+++ b/src/RaveBase/RaveEngine/interface/TaggedTransientTrackKinematicParticle.h
@@ -16,7 +16,8 @@
 
 #include "RecoVertex/KinematicFitPrimitives/interface/TransientTrackKinematicParticle.h"
 
-#include "boost/shared_ptr.hpp"
+//#include "boost/shared_ptr.hpp"
+#include <memory>
 
 /**
  * This class extends the TransientTrackKinematicParticle with a
@@ -36,8 +37,8 @@ class TaggedTransientTrackKinematicParticle :
       float& degreesOfFr, KinematicConstraint * lastConstraint,
       ReferenceCountingPointer<KinematicParticle> previousParticle,
       KinematicStatePropagator * pr,
-      const boost::shared_ptr< reco::TransientTrack > initialTrack =
-        boost::shared_ptr< reco::TransientTrack >() );
+      const std::shared_ptr< reco::TransientTrack > initialTrack =
+        std::shared_ptr< reco::TransientTrack >() );
 
     virtual ~TaggedTransientTrackKinematicParticle();
 
@@ -46,7 +47,7 @@ class TaggedTransientTrackKinematicParticle :
   private:
     void setTag ( const rave::TransientTrackKinematicParticle & tag );
 
-    const boost::shared_ptr< reco::TransientTrack > theInitialTrack;
+    const std::shared_ptr< reco::TransientTrack > theInitialTrack;
     rave::TransientTrackKinematicParticle theTag;
 
 };
diff --git a/src/RaveBase/RaveEngine/src/RaveParameterSetBuilder.cc b/src/RaveBase/RaveEngine/src/RaveParameterSetBuilder.cc
index 0558236..61af607 100644
--- a/src/RaveBase/RaveEngine/src/RaveParameterSetBuilder.cc
+++ b/src/RaveBase/RaveEngine/src/RaveParameterSetBuilder.cc
@@ -2,7 +2,8 @@
 #include "FWCore/MessageLogger/interface/MessageLogger.h"
 #include <boost/spirit/home/classic/core.hpp>
 #include <boost/spirit/home/classic/actor/push_back_actor.hpp>
-#include <boost/shared_ptr.hpp>
+//#include <boost/shared_ptr.hpp>
+#include <memory>
 #include <vector>
 
 using namespace std;
@@ -14,19 +15,19 @@ namespace {
   {
     ParameterSetNode() {};
     ~ParameterSetNode() {};
-    boost::shared_ptr<edm::ParameterSet> current;
-    boost::shared_ptr<ParameterSetNode> parent;
+    std::shared_ptr<edm::ParameterSet> current;
+    std::shared_ptr<ParameterSetNode> parent;
     std::string key_name;
   };
-  boost::shared_ptr<ParameterSetNode> tree;
+  std::shared_ptr<ParameterSetNode> tree;
   std::string last_key;
 
   void nest_in_action(char ch)
   {
     //depth++;
-    boost::shared_ptr<ParameterSetNode> node( new ParameterSetNode() );
+    std::shared_ptr<ParameterSetNode> node( new ParameterSetNode() );
     node->parent = tree;
-    node->current = boost::shared_ptr<edm::ParameterSet>( new edm::ParameterSet() );
+    node->current = std::shared_ptr<edm::ParameterSet>( new edm::ParameterSet() );
     node->key_name = last_key;
     tree = node;
     last_key = "finder";
@@ -71,8 +72,8 @@ edm::ParameterSet rave::ParameterSetBuilder::create ( string s )
   expression = !( ( (+alpha_p) >> ch_p(':') ) & ( key >> ch_p(':') ) ) >> nestedvalue
                >> *( ch_p('-') >> key >> ch_p(':') >> nestedvalue );
 
-  tree = boost::shared_ptr<ParameterSetNode>( new ParameterSetNode() );
-  tree->current = boost::shared_ptr<edm::ParameterSet>( new edm::ParameterSet() );
+  tree = std::shared_ptr<ParameterSetNode>( new ParameterSetNode() );
+  tree->current = std::shared_ptr<edm::ParameterSet>( new edm::ParameterSet() );
   last_key = "finder";
   parse_info<> pI = parse(s.c_str(), expression);
 
diff --git a/src/RaveBase/RaveEngine/src/TaggedTransientTrackKinematicParticle.cc b/src/RaveBase/RaveEngine/src/TaggedTransientTrackKinematicParticle.cc
index a75a566..5adbad0 100644
--- a/src/RaveBase/RaveEngine/src/TaggedTransientTrackKinematicParticle.cc
+++ b/src/RaveBase/RaveEngine/src/TaggedTransientTrackKinematicParticle.cc
@@ -5,7 +5,7 @@ TaggedTransientTrackKinematicParticle::TaggedTransientTrackKinematicParticle (
   KinematicConstraint * lastConstraint,
   ReferenceCountingPointer< KinematicParticle > previousParticle,
   KinematicStatePropagator * pr,
-  const boost::shared_ptr< reco::TransientTrack > initialTrack ) :
+  const std::shared_ptr< reco::TransientTrack > initialTrack ) :
     TransientTrackKinematicParticle ( kineState, chiSquared, degreesOfFr,
                                       lastConstraint, previousParticle, pr,
                                       initialTrack.get() ),
diff --git a/src/RaveBase/RaveInterface/rave/BasicKinematicParticle.h b/src/RaveBase/RaveInterface/rave/BasicKinematicParticle.h
index ec95de1..4e59d45 100644
--- a/src/RaveBase/RaveInterface/rave/BasicKinematicParticle.h
+++ b/src/RaveBase/RaveInterface/rave/BasicKinematicParticle.h
@@ -35,7 +35,8 @@
 
 #include "boost/any.hpp"
 #include "boost/operators.hpp"
-#include "boost/shared_ptr.hpp"
+//#include "boost/shared_ptr.hpp"
+#include <memory>
 
 namespace rave
 {
@@ -121,7 +122,7 @@ class RaveDllExport BasicKinematicParticle :
     /**
      * @return The magnetic field assigned upon creation of this particle
      */
-    boost::shared_ptr< rave::MagneticField > magneticField() const;
+    std::shared_ptr< rave::MagneticField > magneticField() const;
 
     /**
      * @return The pointer to the kinematic tree (if any) current particle
@@ -132,7 +133,7 @@ class RaveDllExport BasicKinematicParticle :
     /**
      * @return The last constraint aplied to this particle.
      */
-    boost::shared_ptr< rave::KinematicConstraint > lastConstraint() const;
+    std::shared_ptr< rave::KinematicConstraint > lastConstraint() const;
 
     int id() const;
     boost::any link() const;
@@ -185,9 +186,9 @@ class RaveDllExport BasicKinematicParticle :
     float theChi2;
 
     /// Members for memory management issues
-    boost::shared_ptr< rave::MagneticField > theField;
+    std::shared_ptr< rave::MagneticField > theField;
 //    KinematicTree theTree;
-    boost::shared_ptr< rave::KinematicConstraint > theConstraint;
+    std::shared_ptr< rave::KinematicConstraint > theConstraint;
 
     int theId;
     boost::any theLink;
diff --git a/src/RaveBase/RaveInterface/rave/KinematicParticle.h b/src/RaveBase/RaveInterface/rave/KinematicParticle.h
index 157eb6a..1c0e2d3 100644
--- a/src/RaveBase/RaveInterface/rave/KinematicParticle.h
+++ b/src/RaveBase/RaveInterface/rave/KinematicParticle.h
@@ -100,7 +100,7 @@ class RaveDllExport KinematicParticle :
     /**
      * @return The magnetic field assigned upon creation of this particle
      */
-    boost::shared_ptr< rave::MagneticField > magneticField() const;
+    std::shared_ptr< rave::MagneticField > magneticField() const;
 
     /**
      * @return The pointer to the kinematic tree (if any) current particle
@@ -111,7 +111,7 @@ class RaveDllExport KinematicParticle :
     /**
      * @return The last constraint applied to this particle.
      */
-    boost::shared_ptr< rave::KinematicConstraint > lastConstraint() const;
+    std::shared_ptr< rave::KinematicConstraint > lastConstraint() const;
 
     int id() const;
     boost::any link() const;
diff --git a/src/RaveBase/RaveInterface/src/BasicKinematicConstraint.cc b/src/RaveBase/RaveInterface/src/BasicKinematicConstraint.cc
index e3356c6..e18d0a5 100644
--- a/src/RaveBase/RaveInterface/src/BasicKinematicConstraint.cc
+++ b/src/RaveBase/RaveInterface/src/BasicKinematicConstraint.cc
@@ -3,14 +3,15 @@
 #include "RecoVertex/KinematicFitPrimitives/interface/KinematicConstraint.h"
 
 #include "boost/assert.hpp"
-#include "boost/shared_ptr.hpp"
+//#include "boost/shared_ptr.hpp"
+#include <memory>
 
 namespace rave
 {
 
 namespace
 {
-  typedef boost::shared_ptr< ::KinematicConstraint > InternalKinematicContraint;
+  typedef std::shared_ptr< ::KinematicConstraint > InternalKinematicContraint;
 }
 
 //! This implicitly leaves the theConstraint variable
@@ -23,7 +24,7 @@ BasicKinematicConstraint::BasicKinematicConstraint (
   boost::any constraint ) :
     theConstraint ( constraint )
 {
-//  BOOST_ASSERT ( typeid ( boost::shared_ptr< ::KinematicConstraint > ) == constraint.type() );
+//  BOOST_ASSERT ( typeid ( std::shared_ptr< ::KinematicConstraint > ) == constraint.type() );
 }
 
 BasicKinematicConstraint::~BasicKinematicConstraint()
diff --git a/src/RaveBase/RaveInterface/src/BasicKinematicParticle.cc b/src/RaveBase/RaveInterface/src/BasicKinematicParticle.cc
index f228289..5cda037 100644
--- a/src/RaveBase/RaveInterface/src/BasicKinematicParticle.cc
+++ b/src/RaveBase/RaveInterface/src/BasicKinematicParticle.cc
@@ -152,7 +152,7 @@ float BasicKinematicParticle::ndof() const
   return theNdof;
 }
 
-boost::shared_ptr< MagneticField > BasicKinematicParticle::magneticField() const
+std::shared_ptr< MagneticField > BasicKinematicParticle::magneticField() const
 {
   return theField;
 }
@@ -164,7 +164,7 @@ KinematicTree BasicKinematicParticle::correspondingTree() const
 }
 */
 
-boost::shared_ptr< rave::KinematicConstraint > BasicKinematicParticle::lastConstraint() const
+std::shared_ptr< rave::KinematicConstraint > BasicKinematicParticle::lastConstraint() const
 {
   return theConstraint;
 }
diff --git a/src/RaveBase/RaveInterface/src/BasicMultipleKinematicConstraint.cc b/src/RaveBase/RaveInterface/src/BasicMultipleKinematicConstraint.cc
index 9cb57ea..fefd1ac 100644
--- a/src/RaveBase/RaveInterface/src/BasicMultipleKinematicConstraint.cc
+++ b/src/RaveBase/RaveInterface/src/BasicMultipleKinematicConstraint.cc
@@ -5,10 +5,10 @@
 #include "boost/cast.hpp"
 
 template<class T, class U>
-boost::shared_ptr<T>
-polymorphic_pointer_cast(boost::shared_ptr<U> const & r)
+std::shared_ptr<T>
+polymorphic_pointer_cast(std::shared_ptr<U> const & r)
 {
-  return boost::shared_ptr<T>(r, boost::polymorphic_cast<T*>(r.get()));
+  return std::shared_ptr<T>(r, boost::polymorphic_cast<T*>(r.get()));
 }
 
 namespace rave
@@ -16,20 +16,20 @@ namespace rave
 
 namespace
 {
-typedef boost::shared_ptr< ::MultipleKinematicConstraint > InternalMultipleKinematicContraint;
+typedef std::shared_ptr< ::MultipleKinematicConstraint > InternalMultipleKinematicContraint;
 }
 
 void BasicMultipleKinematicConstraint::addConstraint ( KinematicConstraint constraint ) const
 {
   ::KinematicConstraint* internalConstraint =
-    boost::any_cast< boost::shared_ptr< ::KinematicConstraint > > ( constraint.data().getInternal() ).get();
+    boost::any_cast< std::shared_ptr< ::KinematicConstraint > > ( constraint.data().getInternal() ).get();
 #if 1
   polymorphic_pointer_cast< ::MultipleKinematicConstraint > (
-    boost::any_cast< boost::shared_ptr< ::KinematicConstraint > > ( getInternal() ) )->addConstraint (
+    boost::any_cast< std::shared_ptr< ::KinematicConstraint > > ( getInternal() ) )->addConstraint (
       internalConstraint );
 #else
   boost::shared_polymorphic_cast< ::MultipleKinematicConstraint > (
-    boost::any_cast< boost::shared_ptr< ::KinematicConstraint > > ( getInternal() ) )->addConstraint (
+    boost::any_cast< std::shared_ptr< ::KinematicConstraint > > ( getInternal() ) )->addConstraint (
       internalConstraint );
 #endif
 
@@ -40,7 +40,7 @@ BasicMultipleKinematicConstraint::BasicMultipleKinematicConstraint (
   boost::any constraint ) :
     BasicKinematicConstraint ( constraint )
 {
-  BOOST_ASSERT ( typeid ( boost::shared_ptr< ::MultipleKinematicConstraint > ) == constraint.type() );
+  BOOST_ASSERT ( typeid ( std::shared_ptr< ::MultipleKinematicConstraint > ) == constraint.type() );
 }
 
 BasicMultipleKinematicConstraint::~BasicMultipleKinematicConstraint()
diff --git a/src/RaveBase/RaveInterface/src/BasicTransientTrackKinematicParticle.cc b/src/RaveBase/RaveInterface/src/BasicTransientTrackKinematicParticle.cc
index 7e46624..d970329 100644
--- a/src/RaveBase/RaveInterface/src/BasicTransientTrackKinematicParticle.cc
+++ b/src/RaveBase/RaveInterface/src/BasicTransientTrackKinematicParticle.cc
@@ -37,7 +37,7 @@ BasicTransientTrackKinematicParticle::BasicTransientTrackKinematicParticle (
 
 namespace
 {
-boost::shared_ptr< ::KinematicStatePropagator > propagator ( new ::TrackKinematicStatePropagator() );
+std::shared_ptr< ::KinematicStatePropagator > propagator ( new ::TrackKinematicStatePropagator() );
 ::TransientTrackKinematicStateBuilder builder;
 
 ::RefCountedKinematicParticle createInternalParticle (
@@ -46,7 +46,7 @@ boost::shared_ptr< ::KinematicStatePropagator > propagator ( new ::TrackKinemati
   const float & degreesOfFr )
 {
   // Convert rave::Track to reco::TransientTrack
-  boost::shared_ptr< reco::TransientTrack > recoTrack (
+  std::shared_ptr< reco::TransientTrack > recoTrack (
     new reco::TransientTrack ( RaveToCmsObjects().tTrack ( initialTrack ) ) );
 
   ::KinematicState initState = builder (
diff --git a/src/RaveBase/RaveInterface/src/KinematicConstraintBuilder.cc b/src/RaveBase/RaveInterface/src/KinematicConstraintBuilder.cc
index a3b19da..66423ab 100644
--- a/src/RaveBase/RaveInterface/src/KinematicConstraintBuilder.cc
+++ b/src/RaveBase/RaveInterface/src/KinematicConstraintBuilder.cc
@@ -27,7 +27,7 @@ KinematicConstraintBuilder::~KinematicConstraintBuilder()
 
 rave::KinematicConstraint KinematicConstraintBuilder::createMassKinematicConstraint ( const float & mass, const float sigma ) const
 {
-  boost::shared_ptr< ::KinematicConstraint > internalConstraint (
+  std::shared_ptr< ::KinematicConstraint > internalConstraint (
     new ::MassKinematicConstraint (
       boost::numeric_cast< ::ParticleMass > ( mass ),
       boost::numeric_cast< float > ( sigma ) ) );
@@ -36,7 +36,7 @@ rave::KinematicConstraint KinematicConstraintBuilder::createMassKinematicConstra
 
 rave::MultipleKinematicConstraint KinematicConstraintBuilder::createMultipleKinematicConstraint() const
 {
-  boost::shared_ptr< ::MultipleKinematicConstraint > internalConstraint (
+  std::shared_ptr< ::MultipleKinematicConstraint > internalConstraint (
     new ::MultipleKinematicConstraint () );
   return rave::MultipleKinematicConstraint ( BasicMultipleKinematicConstraint ( internalConstraint ) );
 }
@@ -44,7 +44,7 @@ rave::MultipleKinematicConstraint KinematicConstraintBuilder::createMultipleKine
 
 rave::KinematicConstraint KinematicConstraintBuilder::createBackToBackKinematicConstraint() const
 {
-  boost::shared_ptr< ::KinematicConstraint > internalConstraint (
+  std::shared_ptr< ::KinematicConstraint > internalConstraint (
     new ::BackToBackKinematicConstraint () );
   return rave::KinematicConstraint ( BasicKinematicConstraint ( internalConstraint ) );
 }
@@ -52,7 +52,7 @@ rave::KinematicConstraint KinematicConstraintBuilder::createBackToBackKinematicC
 
 rave::KinematicConstraint KinematicConstraintBuilder::createEqualMassKinematicConstraint() const
 {
-  boost::shared_ptr< ::MultiTrackKinematicConstraint > internalConstraint (
+  std::shared_ptr< ::MultiTrackKinematicConstraint > internalConstraint (
       new ::EqualMassKinematicConstraint () );
   return rave::KinematicConstraint ( BasicKinematicConstraint ( internalConstraint ) );
 }
@@ -62,7 +62,7 @@ rave::KinematicConstraint KinematicConstraintBuilder::createFourMomentumKinemati
   const rave::Vector4D & momentum, const rave::Vector4D & deviation,
   const bool mass_is_energy) const
 {
-  boost::shared_ptr< ::KinematicConstraint > internalConstraint (
+  std::shared_ptr< ::KinematicConstraint > internalConstraint (
     new ::FourMomentumKinematicConstraint (
       RaveToCmsObjects().toAlgebraicVector ( momentum ),
       RaveToCmsObjects().toAlgebraicVector ( deviation ), mass_is_energy ) );
@@ -72,7 +72,7 @@ rave::KinematicConstraint KinematicConstraintBuilder::createFourMomentumKinemati
 rave::KinematicConstraint KinematicConstraintBuilder::createMomentumKinematicConstraint (
   const rave::Vector3D & momentum, const rave::Vector3D & deviation ) const
 {
-  boost::shared_ptr< ::KinematicConstraint > internalConstraint (
+  std::shared_ptr< ::KinematicConstraint > internalConstraint (
     new ::MomentumKinematicConstraint (
       RaveToCmsObjects().toAlgebraicVector ( momentum ),
       RaveToCmsObjects().toAlgebraicVector ( deviation ) ) );
@@ -82,7 +82,7 @@ rave::KinematicConstraint KinematicConstraintBuilder::createMomentumKinematicCon
 rave::KinematicConstraint KinematicConstraintBuilder::createPointingKinematicConstraint (
   const rave::Point3D & reference ) const
 {
-  boost::shared_ptr< ::KinematicConstraint > internalConstraint (
+  std::shared_ptr< ::KinematicConstraint > internalConstraint (
     new ::PointingKinematicConstraint (
       RaveToCmsObjects().convert ( reference ) ) );
   return rave::KinematicConstraint ( BasicKinematicConstraint ( internalConstraint ) );
@@ -91,7 +91,7 @@ rave::KinematicConstraint KinematicConstraintBuilder::createPointingKinematicCon
 rave::KinematicConstraint KinematicConstraintBuilder::createSimplePointingConstraint (
   const rave::Point3D & reference ) const
 {
-  boost::shared_ptr< ::KinematicConstraint > internalConstraint (
+  std::shared_ptr< ::KinematicConstraint > internalConstraint (
     new ::SimplePointingConstraint (
       RaveToCmsObjects().convert ( reference ) ) );
   return rave::KinematicConstraint ( BasicKinematicConstraint ( internalConstraint ) );
@@ -100,7 +100,7 @@ rave::KinematicConstraint KinematicConstraintBuilder::createSimplePointingConstr
 rave::KinematicConstraint KinematicConstraintBuilder::createSmartPointingConstraint (
   const rave::Point3D & reference ) const
 {
-  boost::shared_ptr< ::KinematicConstraint > internalConstraint (
+  std::shared_ptr< ::KinematicConstraint > internalConstraint (
     new ::SmartPointingConstraint (
       RaveToCmsObjects().convert ( reference ) ) );
   return rave::KinematicConstraint ( BasicKinematicConstraint ( internalConstraint ) );
@@ -108,7 +108,7 @@ rave::KinematicConstraint KinematicConstraintBuilder::createSmartPointingConstra
 
 rave::KinematicConstraint KinematicConstraintBuilder::createVertexKinematicConstraint() const
 {
-  boost::shared_ptr< ::MultiTrackKinematicConstraint > internalConstraint (
+  std::shared_ptr< ::MultiTrackKinematicConstraint > internalConstraint (
     new ::VertexKinematicConstraint() );
   return rave::KinematicConstraint ( BasicKinematicConstraint ( internalConstraint ) );
 }
@@ -117,7 +117,7 @@ rave::KinematicConstraint KinematicConstraintBuilder::createTwoTrackMassKinemati
   const float & mass ) const
 {
   ::ParticleMass lmass = boost::numeric_cast< ::ParticleMass > ( mass );
-  boost::shared_ptr< ::MultiTrackKinematicConstraint > internalConstraint (
+  std::shared_ptr< ::MultiTrackKinematicConstraint > internalConstraint (
     new ::TwoTrackMassKinematicConstraint ( lmass ) );
   return rave::KinematicConstraint ( BasicKinematicConstraint ( internalConstraint ) );
 }
diff --git a/src/RaveBase/RaveInterface/src/KinematicParticle.cc b/src/RaveBase/RaveInterface/src/KinematicParticle.cc
index f9bbdae..79de9d8 100644
--- a/src/RaveBase/RaveInterface/src/KinematicParticle.cc
+++ b/src/RaveBase/RaveInterface/src/KinematicParticle.cc
@@ -66,12 +66,12 @@ float KinematicParticle::ndof() const
   return data().ndof();
 }
 
-boost::shared_ptr< rave::MagneticField > KinematicParticle::magneticField() const
+std::shared_ptr< rave::MagneticField > KinematicParticle::magneticField() const
 {
   return data().magneticField();
 }
 
-boost::shared_ptr< rave::KinematicConstraint > KinematicParticle::lastConstraint() const
+std::shared_ptr< rave::KinematicConstraint > KinematicParticle::lastConstraint() const
 {
   return data().lastConstraint();
 }
diff --git a/src/RaveBase/RaveInterface/src/KinematicTreeFactory.cc b/src/RaveBase/RaveInterface/src/KinematicTreeFactory.cc
index 82789cc..7c5a9d8 100644
--- a/src/RaveBase/RaveInterface/src/KinematicTreeFactory.cc
+++ b/src/RaveBase/RaveInterface/src/KinematicTreeFactory.cc
@@ -183,7 +183,7 @@ rave::KinematicTree KinematicTreeFactory::useVertexFitter (
 
     // Unwrap the constraint
     MultiTrackKinematicConstraint * internalConstraint =
-      boost::any_cast< boost::shared_ptr< ::MultiTrackKinematicConstraint > > (
+      boost::any_cast< std::shared_ptr< ::MultiTrackKinematicConstraint > > (
         cs.data().getInternal() ).get();
 
     // Do the fitting, this is where the real work is done
@@ -230,7 +230,7 @@ std::vector< rave::KinematicTree > KinematicTreeFactory::useParticleFitter (
 
     // Unwrap the constraint
     ::KinematicConstraint * internalConstraint =
-      boost::any_cast< boost::shared_ptr< ::KinematicConstraint > > (
+      boost::any_cast< std::shared_ptr< ::KinematicConstraint > > (
         cs.data().getInternal() ).get();
 
     edm::LogInfo ( "KinematicTreeFactory" ) << "Using KinematicParticleFitter with "
diff --git a/src/RecoVertex/GaussianSumVertexFit/src/VertexGaussianStateConversions.cc b/src/RecoVertex/GaussianSumVertexFit/src/VertexGaussianStateConversions.cc
index 14c4729..b7798cc 100644
--- a/src/RecoVertex/GaussianSumVertexFit/src/VertexGaussianStateConversions.cc
+++ b/src/RecoVertex/GaussianSumVertexFit/src/VertexGaussianStateConversions.cc
@@ -3,13 +3,14 @@
 #include "RecoVertex/GaussianSumVertexFit/interface/BasicMultiVertexState.h"
 #include "TrackingTools/GsfTools/interface/SingleGaussianState.h"
 #include "DataFormats/CLHEP/interface/Migration.h"
-#include "boost/shared_ptr.hpp"
+//#include "boost/shared_ptr.hpp"
+#include <memory>
 
 namespace GaussianStateConversions {
 
   MultiGaussianState<3> multiGaussianStateFromVertex (const VertexState aState)
   {
-    typedef boost::shared_ptr< SingleGaussianState<3> > SingleStatePtr;
+    typedef std::shared_ptr< SingleGaussianState<3> > SingleStatePtr;
     const std::vector<VertexState> components = aState.components();
     MultiGaussianState<3>::SingleStateContainer singleStates;
     singleStates.reserve(components.size());
diff --git a/src/TrackingTools/GeomPropagators/interface/AnalyticalPropagatorESProducer.h b/src/TrackingTools/GeomPropagators/interface/AnalyticalPropagatorESProducer.h
index a5fb031..4d172b8 100644
--- a/src/TrackingTools/GeomPropagators/interface/AnalyticalPropagatorESProducer.h
+++ b/src/TrackingTools/GeomPropagators/interface/AnalyticalPropagatorESProducer.h
@@ -5,15 +5,16 @@
 #include "FWCore/ParameterSet/interface/ParameterSet.h"
 #include "TrackingTools/Records/interface/TrackingComponentsRecord.h"
 #include "TrackingTools/GeomPropagators/interface/AnalyticalPropagator.h"
-#include <boost/shared_ptr.hpp>
+//#include <boost/shared_ptr.hpp>
+#include <memory>
 
 class  AnalyticalPropagatorESProducer: public edm::ESProducer{
  public:
   AnalyticalPropagatorESProducer(const edm::ParameterSet & p);
   virtual ~AnalyticalPropagatorESProducer(); 
-  boost::shared_ptr<Propagator> produce(const TrackingComponentsRecord &);
+  std::shared_ptr<Propagator> produce(const TrackingComponentsRecord &);
  private:
-  boost::shared_ptr<Propagator> _propagator;
+  std::shared_ptr<Propagator> _propagator;
   edm::ParameterSet pset_;
 };
 
diff --git a/src/TrackingTools/GsfTools/interface/CloseComponentsMerger.h b/src/TrackingTools/GsfTools/interface/CloseComponentsMerger.h
index 814cb8d..4438a26 100644
--- a/src/TrackingTools/GsfTools/interface/CloseComponentsMerger.h
+++ b/src/TrackingTools/GsfTools/interface/CloseComponentsMerger.h
@@ -5,7 +5,8 @@
 #include "TrackingTools/GsfTools/interface/DistanceBetweenComponents.h"
 #include "DataFormats/GeometryCommonDetAlgo/interface/DeepCopyPointerByClone.h"
 
-#include "boost/shared_ptr.hpp"
+//#include "boost/shared_ptr.hpp"
+#include <memory>
 #include <map>
 
 
@@ -21,7 +22,7 @@ class CloseComponentsMerger : public MultiGaussianStateMerger<N> {
  private:
   typedef SingleGaussianState<N> SingleState;
   typedef MultiGaussianState<N> MultiState;
-  typedef boost::shared_ptr<SingleState> SingleStatePtr;
+  typedef std::shared_ptr<SingleState> SingleStatePtr;
 
  public:
 
diff --git a/src/TrackingTools/GsfTools/interface/GaussianStateLessWeight.h b/src/TrackingTools/GsfTools/interface/GaussianStateLessWeight.h
index 7839c47..690f312 100644
--- a/src/TrackingTools/GsfTools/interface/GaussianStateLessWeight.h
+++ b/src/TrackingTools/GsfTools/interface/GaussianStateLessWeight.h
@@ -2,7 +2,8 @@
 #define GaussianStateLessWeight_h_
 
 #include "TrackingTools/GsfTools/interface/SingleGaussianState.h"
-#include "boost/shared_ptr.hpp"
+//#include "boost/shared_ptr.hpp"
+#include <memory>
 
 /** \class GaussianStateLessWeight
  * Compare two SingleGaussianState acc. to their weight.
@@ -12,7 +13,7 @@ template <unsigned int N>
 class GaussianStateLessWeight {
   
 private:
-  typedef boost::shared_ptr< SingleGaussianState<N> > SingleStatePtr;
+  typedef std::shared_ptr< SingleGaussianState<N> > SingleStatePtr;
 
 public:
   GaussianStateLessWeight() {}
diff --git a/src/TrackingTools/GsfTools/interface/MultiGaussianState.h b/src/TrackingTools/GsfTools/interface/MultiGaussianState.h
index 241db4d..93ecdb1 100644
--- a/src/TrackingTools/GsfTools/interface/MultiGaussianState.h
+++ b/src/TrackingTools/GsfTools/interface/MultiGaussianState.h
@@ -2,7 +2,8 @@
 #define MultiGaussianState_H
 
 #include "TrackingTools/GsfTools/interface/SingleGaussianState.h"
-#include "boost/shared_ptr.hpp"
+//#include "boost/shared_ptr.hpp"
+#include <memory>
 
 #include <vector>
 
@@ -20,8 +21,8 @@ public:
   typedef typename SingleGaussianState<N>::Vector Vector;
   typedef typename SingleGaussianState<N>::Matrix Matrix;
   typedef SingleGaussianState<N> SingleState;
-  typedef boost::shared_ptr<SingleState> SingleStatePtr;
-//   typedef std::vector< boost::shared_ptr<const SingleState> > SingleStateContainer;
+  typedef std::shared_ptr<SingleState> SingleStatePtr;
+//   typedef std::vector< std::shared_ptr<const SingleState> > SingleStateContainer;
   typedef std::vector< SingleStatePtr > SingleStateContainer;
 
 public:
diff --git a/src/TrackingTools/TrajectoryParametrization/interface/LocalTrajectoryError.h b/src/TrackingTools/TrajectoryParametrization/interface/LocalTrajectoryError.h
index fcb5f1e..a83ff24 100644
--- a/src/TrackingTools/TrajectoryParametrization/interface/LocalTrajectoryError.h
+++ b/src/TrackingTools/TrajectoryParametrization/interface/LocalTrajectoryError.h
@@ -4,7 +4,8 @@
 #include "DataFormats/GeometrySurface/interface/LocalError.h"
 #include "DataFormats/CLHEP/interface/AlgebraicObjects.h"
 
-#include <boost/shared_ptr.hpp>
+//#include <boost/shared_ptr.hpp>
+#include <memory>
 
 /** Class providing access to the covariance matrix of a set of relevant parameters of a trajectory
  *  in a local, Cartesian frame. The errors provided are: <BR> <BR>
@@ -61,7 +62,7 @@ public:
   const AlgebraicSymMatrix55 &weightMatrix() const {
         if (theWeightMatrixPtr.get() == 0) {
                 int ifail;
-                boost::shared_ptr<AlgebraicSymMatrix55> inv(
+                std::shared_ptr<AlgebraicSymMatrix55> inv(
                           new AlgebraicSymMatrix55(theCovarianceMatrix.Inverse(ifail))
                 );
                 theWeightMatrixPtr = inv;
@@ -89,7 +90,7 @@ public:
 
 private:
   AlgebraicSymMatrix55 theCovarianceMatrix;
-  mutable boost::shared_ptr<AlgebraicSymMatrix55> theWeightMatrixPtr;
+  mutable std::shared_ptr<AlgebraicSymMatrix55> theWeightMatrixPtr;
 };
 
 #endif
-- 
2.2.1

